import os
import sys
import gnupg

def generate_pgp_key(email):
    gpg = gnupg.GPG()

    key_params = {
        'key_type': 'RSA',
        'key_length': 4096,
        'key_usage': '',
        'subkey_type': 'RSA',
        'subkey_length': 4096,
        'subkey_usage': 'encrypt,sign,auth',
        'name_comment': 'Generated by python-gnupg',
        'name_email': email,
        'expire_date': '0',
        'passphrase': None,
    }

    key_input = gpg.gen_key_input(**key_params)
    key = gpg.gen_key(key_input)

    return key

def save_keypair_to_directory(gpg, key, directory='keys'):
    if not os.path.exists(directory):
        os.makedirs(directory)

    public_key = gpg.export_keys(key.fingerprint)
    private_key = gpg.export_keys(key.fingerprint, secret=True)

    with open(os.path.join(directory, 'public_key.asc'), 'w') as pub_file:
        pub_file.write(public_key)

    with open(os.path.join(directory, 'private_key.asc'), 'w') as priv_file:
        priv_file.write(private_key)

    print("Keys saved to directory: {}".format(directory))

def main():
    if len(sys.argv) < 2:
        print("Usage: python generate_pgp_keys.py <email>")
        sys.exit(1)

    email = sys.argv[1]
    gpg = gnupg.GPG()
    key = generate_pgp_key(email)
    save_keypair_to_directory(gpg, key)

if __name__ == "__main__":
    main()
